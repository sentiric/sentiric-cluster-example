# docker-compose.zone_a.yml

networks:
  sentiric-net:
    name: "${NETWORK_NAME:-sentiric-net}"
    driver: bridge
    ipam:
      config:
        - subnet: ${NETWORK_SUBNET}
          gateway: ${NETWORK_GATEWAY}

volumes:
  # [backbone]: Omurga Servisleri (Backbone Layer)
  # --------------------------------------------------
  discovery_data:


services:
  discovery-service:
    image: ghcr.io/sentiric/sentiric-discovery:latest

    volumes:
      - discovery_data:/consul/data
      - ./discovery/config/zone_a:/consul/config
    ports:
      # Bu portlar Tailscale ağı üzerinden iletişimi sağlayacak.
      - "${DISCOVERY_SERVICE_RPC_PORT:-8300}:${DISCOVERY_SERVICE_RPC_PORT:-8300}" # Server RPC (Remote Procedure Call) portudur.
      - "${DISCOVERY_SERVICE_LAN_PORT:-8301}:${DISCOVERY_SERVICE_LAN_PORT:-8301}/tcp" # Küme içi Agent iletişimi (Gossip - LAN) (TCP)
      - "${DISCOVERY_SERVICE_LAN_PORT:-8301}:${DISCOVERY_SERVICE_LAN_PORT:-8301}/udp" # Küme içi Agent iletişimi (Gossip - LAN) (UDP)
      - "${DISCOVERY_SERVICE_WAN_PORT:-8302}:${DISCOVERY_SERVICE_WAN_PORT:-8302}/tcp" # Veri merkezleri arası Sunucu iletişimi (Gossip - WAN) (TCP)
      - "${DISCOVERY_SERVICE_WAN_PORT:-8302}:${DISCOVERY_SERVICE_WAN_PORT:-8302}/udp" # Veri merkezleri arası Sunucu iletişimi (Gossip - WAN) (UDP)
      - "${DISCOVERY_SERVICE_HTTP_PORT:-8500}:8500" # Discovery UI & HTTP API
      - "${DISCOVERY_SERVICE_DNS_PORT:-8600}:8600/tcp" # Discovery DNS Arayüzü (TCP)
      - "${DISCOVERY_SERVICE_DNS_PORT:-8600}:8600/udp" # Discovery DNS Arayüzü (UDP)
    networks:
      sentiric-net:
        ipv4_address: ${DISCOVERY_SERVICE_IPV4_ADDRESS}
    command: >
      agent -server -bootstrap-expect=1 -ui 
      -node=${ZONE_A_HOSTNAME} 
      -advertise='${ZONE_A_BACKBONE_IP}' 
      -retry-join='${ZONE_B_BACKBONE_IP}' 
      -retry-join='${ZONE_C_BACKBONE_IP}'       
      -datacenter=${DATACENTER_NAME} 
      -client=0.0.0.0 
      -bind=0.0.0.0 
      -disable-host-node-id 
      -config-dir=/consul/config
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'
    restart: always
    healthcheck:
      # Sadece Consul agent'ının ayakta ve API'sinin cevap verir durumda olduğunu
      # kontrol ediyoruz. Bu, küme kurulmadan veya lider seçilmeden önce de çalışır.
      test: ["CMD", "curl", "-sf", "http://127.0.0.1:8500/v1/agent/self"]
      interval: 10s
      timeout: 5s
      retries: 10

  # [capability-telephony]: Yetenek Servisleri (Capability Layer)
  # --------------------------------------------------
  sip-gateway:
    build: { context: services/sip-gateway }
    env_file: [ "${ENV_FILE_PATH}" ]
    ports:
      - "${SIP_GATEWAY_HTTP_PORT:-13010}:${SIP_GATEWAY_HTTP_PORT:-13010}"
      - "${SIP_GATEWAY_METRICS_PORT:-13012}:${SIP_GATEWAY_METRICS_PORT:-13012}"
      - "${SIP_GATEWAY_UDP_PORT:-13014}:${SIP_GATEWAY_UDP_PORT:-13014}/udp"
    networks:
      sentiric-net:
        ipv4_address: ${SIP_GATEWAY_IPV4_ADDRESS}
    restart: always
    healthcheck:
      test: [ "CMD", "sh", "-c", "curl -sf http://127.0.0.1:13010/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    depends_on:
      discovery-service: { condition: service_healthy }
